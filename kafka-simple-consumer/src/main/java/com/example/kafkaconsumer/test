public class Test {
    
    /**
     * Generic deduplication using a custom key extractor function.
     * Last occurrence wins for duplicate keys.
     */
    public <T> List<T> dedupe(List<T> items, Function<T, String> keyExtractor) {
        if (items == null || items.isEmpty()) {
            return new ArrayList<>();
        }
        
        Map<String, T> uniqueItems = new LinkedHashMap<>();
        
        for (T item : items) {
            if (item != null) {
                String key = keyExtractor.apply(item);
                if (key != null && !key.trim().isEmpty()) {
                    uniqueItems.put(key, item);
                }
            }
        }
        
        return new ArrayList<>(uniqueItems.values());
    }
}

// Usage examples:
// dedupe(statsList, stat -> stat.getKey());
// dedupe(namedItems, item -> item.getName());
// dedupe(objects, obj -> obj.getId());