@Configuration
public class KafkaConfiguration {
    
    private static final Logger CONFIG_LOG = LoggerFactory.getLogger(KafkaConfiguration.class);
    
    @Autowired
    private KafkaMetrics kafkaMetrics;
    
    @Bean
    DefaultErrorHandler errorHandler() {
        AtomicLong errorCount = new AtomicLong(0);
        AtomicLong lastLogTime = new AtomicLong(0);
        
        DefaultErrorHandler handler = new DefaultErrorHandler((record, ex) -> {
            // Clean separation - metrics handled by dedicated component
            kafkaMetrics.recordError();
            
            long total = errorCount.incrementAndGet();
            
            if (shouldLog(total, lastLogTime)) {
                CONFIG_LOG.error("Kafka error #{}: topic={}, partition={}, offset={}, type={}", 
                    total, record.topic(), record.partition(), record.offset(),
                    ex.getClass().getSimpleName());
                lastLogTime.set(System.currentTimeMillis());
            }
            
        }, new FixedBackOff(100L, 2));
        
        handler.addNotRetryableExceptions(
            SerializationException.class,
            DeserializationException.class,
            RecordTooLargeException.class
        );
        
        handler.setCommitRecovered(true);
        return handler;
    }
    
    private boolean shouldLog(long errorCount, AtomicLong lastLogTime) {
        return errorCount == 1 || errorCount == 10 || errorCount == 100 || 
               errorCount == 1000 || errorCount % 10000 == 0 ||
               System.currentTimeMillis() - lastLogTime.get() > 60000;
    }
}